/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sudoku.net;

import ClassCommon.Bang;
import ClassCommon.Player;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.net.ssl.SSLServerSocket;
import javax.net.ssl.SSLSocket;
import javax.net.ssl.SSLSocketFactory;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author HOANDHTB
 */
public class ClientBeginForm extends javax.swing.JFrame {

    private static final int Port=1995;
    private static final String HOST="localhost";
    private  SSLSocket socket;
    private  DataInputStream in;// dữu liệu luồng vào
    private  DataOutputStream out;// dữ liệu luồng ra
    private  InputStream inputStream;// luồng vào
    private  OutputStream outputStream;//luồng ra
    String questionDialog="";
    int STTNguoiChoi;
    boolean checkStart=false;
    private ArrayList<Player> listPlayers=new ArrayList<Player>();
    private Bang table=new Bang();
    public ClientBeginForm() {
        try {
            initComponents();
            buttonStart.setOpaque(false);
            buttonStart.setContentAreaFilled(false);
            questionDialog=JOptionPane.showInputDialog
                    (null,"<html>Tên của người chơi?","Hộp thoại",JOptionPane.QUESTION_MESSAGE);
            run();
            out.writeUTF(questionDialog);
            out.flush();
            STTNguoiChoi=in.readInt();
            if(STTNguoiChoi==1)
            {
                buttonStart.setVisible(true);
            }
            else
            {
                 buttonStart.setVisible(false);
            }
            
            //System.err.println(STTNguoiChoi);
        } catch (IOException ex) {
            Logger.getLogger(ClientBeginForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public ClientBeginForm(SSLSocket socket) {
        try {
            initComponents();
            buttonStart.setOpaque(false);
            buttonStart.setContentAreaFilled(false);
            questionDialog=JOptionPane.showInputDialog
                    (null,"<html>Tên của người chơi?","Hộp thoại",JOptionPane.QUESTION_MESSAGE);
            run();
            out.writeUTF(questionDialog);
            out.flush();
            STTNguoiChoi=in.readInt();
            if(STTNguoiChoi==1)
            {
                buttonStart.setVisible(true);
            }
            else
            {
                 buttonStart.setVisible(false);
            }
            
            //System.err.println(STTNguoiChoi);
        } catch (IOException ex) {
            Logger.getLogger(ClientBeginForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PanelMain = new javax.swing.JPanel();
        PanelSelection = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnDoiKhang = new javax.swing.JButton();
        btnHopTac = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        PanelGrid = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        buttonStart = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        PanelMain.setLayout(new java.awt.CardLayout());

        PanelSelection.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imager/Selection.png"))); // NOI18N
        PanelSelection.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 50, 480, 50));

        btnDoiKhang.setText("Đối kháng");
        btnDoiKhang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDoiKhangActionPerformed(evt);
            }
        });
        PanelSelection.add(btnDoiKhang, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 120, 131, 34));

        btnHopTac.setText("Hợp tác");
        btnHopTac.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHopTacActionPerformed(evt);
            }
        });
        PanelSelection.add(btnHopTac, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 190, 131, 34));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imager/Backgruond.png"))); // NOI18N
        PanelSelection.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 530, 340));

        PanelMain.add(PanelSelection, "card3");

        PanelGrid.setPreferredSize(new java.awt.Dimension(480, 328));
        PanelGrid.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "STT", "Tên người chơi", "Chức năng"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Table.setEnabled(false);
        Table.setGridColor(new java.awt.Color(0, 0, 0));
        Table.setSelectionBackground(new java.awt.Color(255, 255, 255));
        Table.setSelectionForeground(new java.awt.Color(0, 0, 0));
        jScrollPane1.setViewportView(Table);
        if (Table.getColumnModel().getColumnCount() > 0) {
            Table.getColumnModel().getColumn(0).setResizable(false);
            Table.getColumnModel().getColumn(1).setResizable(false);
            Table.getColumnModel().getColumn(2).setResizable(false);
        }

        PanelGrid.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 130, 425, 130));

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imager/sudoku-logo.png"))); // NOI18N
        PanelGrid.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 10, 475, 100));

        buttonStart.setBackground(new java.awt.Color(255, 255, 255));
        buttonStart.setForeground(new java.awt.Color(255, 255, 255));
        buttonStart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imager/Start-icon.png"))); // NOI18N
        buttonStart.setText("Bắt đầu");
        buttonStart.setBorder(null);
        buttonStart.setBorderPainted(false);
        buttonStart.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        buttonStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonStartActionPerformed(evt);
            }
        });
        PanelGrid.add(buttonStart, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 270, 80, 50));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imager/Backgruond1.png"))); // NOI18N
        PanelGrid.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 0, 490, 330));

        PanelMain.add(PanelGrid, "card2");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PanelMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PanelMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public void run()
    {   
            System.setProperty("javax.net.ssl.trustStore", "jnp4e.keys");
              try {
            SSLSocketFactory sslsocketfactory = (SSLSocketFactory) SSLSocketFactory.getDefault();
            socket= (SSLSocket) sslsocketfactory.createSocket("localhost", Port);
            String[] supported = socket. getSupportedCipherSuites();
            socket. setEnabledCipherSuites(supported);
           inputStream=socket.getInputStream();
           outputStream=socket.getOutputStream();
           in=new DataInputStream(inputStream);
           out=new DataOutputStream(outputStream);
           
        } catch (Exception exception) {
            exception.printStackTrace();
        }
    }
    public class Listen implements Runnable{
       
        InputStream in;
        ObjectInputStream objectInputStream;
        Object object;
        ClientBeginForm form;
        public Listen(SSLSocket socket,ClientBeginForm form)
        {
            this.form=form;
            try {
                in=socket.getInputStream();
                objectInputStream=new ObjectInputStream(in);
            } catch (IOException ex) {
                Logger.getLogger(ClientBeginForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        public void inserRowToTable(ArrayList<Player> players)
        {
            Vector Collum=new Vector();
           Collum.add("STT");
           Collum.add("Tên người chơi");
           Collum.add("Chức năng");
           Vector object=new Vector();
           for(Player player:players)
           {
               Vector Row=new Vector();
               Row.add(player.serial);
               Row.add(player.name_player);
               Row.add(player.function);
               object.add(Row);
           }
           DefaultTableModel model=new DefaultTableModel(object, Collum);
           Table.setModel(model);
        }
        @Override
        public void run() {
            try {
                
               
                while(( object =  objectInputStream.readObject())!=null)
                {
                   String str=object.toString();
                 
                    if(str.indexOf("ClassCommon.Player")>=0)
                    {
                        listPlayers=(ArrayList<Player>)object;
                        inserRowToTable(listPlayers);
                        socket.close();
                        SSLSocketFactory sslsocketfactory = (SSLSocketFactory) SSLSocketFactory.getDefault();
                         socket= (SSLSocket) sslsocketfactory.createSocket("localhost", Port);
                         String[] supported = socket. getSupportedCipherSuites();
                         socket. setEnabledCipherSuites(supported);
                         in=socket.getInputStream();
                         objectInputStream=new ObjectInputStream(in);
                    }
                    else
                    {
                        System.out.println(str);
                        table=(Bang)object;
                        socket.close();
                         SSLSocketFactory sslsocketfactory = (SSLSocketFactory) SSLSocketFactory.getDefault();
                         socket= (SSLSocket) sslsocketfactory.createSocket("localhost", Port);
                         String[] supported = socket. getSupportedCipherSuites();
                         socket. setEnabledCipherSuites(supported);
                        this.form.setVisible(false);
                        SudokuNet sudokuNet=new SudokuNet(socket,questionDialog,table,0);
                        sudokuNet.setVisible(true);
                         
                         break;
                    }
                }
                
              
            } catch (IOException ex) {
                
               Logger.getLogger(ClientBeginForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ClientBeginForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }
    
   public class ClientListen implements Runnable
   {
         SSLSocket socket;
         ClientBeginForm form;
        public ClientListen(SSLSocket socket,ClientBeginForm form)
        {
           this.socket=socket;
           this.form=form;
        }
        @Override
        public void run() {
                           
                 new Thread(new Listen(socket,form)).start();
                  
            }
              
        
   }
    private void btnDoiKhangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDoiKhangActionPerformed
        try {
            out.writeUTF("countervailing");
           boolean kt=in.readBoolean();
           if(kt==true)
           {
                PanelMain.removeAll();
                PanelMain.add(PanelGrid);
                PanelMain.repaint();;
                PanelMain.revalidate();
               new Thread(new ClientListen(socket,this)).start();
           }
        } catch (IOException ex) {
            Logger.getLogger(ClientBeginForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDoiKhangActionPerformed

    private void btnHopTacActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHopTacActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnHopTacActionPerformed

    private void buttonStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonStartActionPerformed
        try {
            if(listPlayers.size()>=2)
            {
                outputStream=socket.getOutputStream();
                out=new DataOutputStream(outputStream);
                out.writeUTF("start");
            } else
            {
                JOptionPane.showConfirmDialog(null, "Số lượng người chơi chưa đủ bạn chưa thể bắt đầu.","Thông báo",JOptionPane.ERROR_MESSAGE);
            }
        } catch (IOException ex) {
            Logger.getLogger(ClientBeginForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonStartActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientBeginForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientBeginForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientBeginForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientBeginForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientBeginForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PanelGrid;
    private javax.swing.JPanel PanelMain;
    private javax.swing.JPanel PanelSelection;
    private javax.swing.JTable Table;
    private javax.swing.JButton btnDoiKhang;
    private javax.swing.JButton btnHopTac;
    private javax.swing.JButton buttonStart;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
